<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
</head>

<body>

  <% include ../partials/nav.ejs %>

<section class="hero">

  <div class="hero__container">

    <h1 class="hero__title">
      <a href="/">
        Beagle
      </a>
    </h1>

    <p>
      Use Beagle to run multiple Frontend tests all at once and compile into a single report. Beagle can also be integrated into your workflow, so tests run automatically when you deploy.
    </p>

    <form action="/generate/" method="get" class="js-get-report inactive">
      <input type="url" placeholder="type URL" id="url" name="url" value="">
      <button type="submit" class="submit">start tests</button>
    </form>

  </div>

</section>

  <div class="container js-report" style="display: none;">

    <div class="row">
      <div class="column-12">

        <h3 class="js-summary"></h3>
        <p class="js-result"></p>

        <table>
          <tbody>
          <tr class="js-row"></tr>
          </tbody>
        </table>

        <p>Your report is stored on Google Drive.</p>

      </div>
    </div>
  </div>

  <footer>
    Beagle was created by Michael Gunner.
  </footer>

</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
<script>
    const socket = io();
    const resultContainer = document.querySelector('.js-result');
    const resultSummary = document.querySelector('.js-summary');
    const form = document.querySelector('.js-get-report');

    form.addEventListener("submit", function(e){
        let siteUrl = document.getElementById("url").value;

        siteUrl
        socket.emit ('send site', { url: siteUrl });
        e.preventDefault();
    });

    socket.on('connect', function() {
        form.className += " active";
    });

    //
    socket.on('beagle-result', function (data) {
        resultSummary.append(data.site);
        document.querySelector('.js-report').style.display = "block";

        const tr = document.querySelector('.js-row');
        const data = data.report.formatted;

        Object.keys(data).forEach(key => {
            let cell = document.createElement("td");
            console.log(Math.round(parseInt(data[key])));

            cell.innerHTML = "<h4>" + key + "</h4><span>" + Math.round(parseInt(data[key])) + "</span>";

            tr.appendChild(cell);
        });
    });
</script>
</html>
